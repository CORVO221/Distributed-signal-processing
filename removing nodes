clc
clear
%% Grid graph generation
n = 8;
N=n^2;
A = delsq(numgrid('S',n+2));
G = graph(A,'omitselfloops');
A=adjacency(G);
A=full(A);
G=graph(A);
h = plot(G);
h.XData = floor((0:N-1)/8);
h.YData = rem((0:N-1), 8);
axis equal;
% Edges
E= G.Edges;
E=table2array(E);
E=E(:,1:2);
%% Sensors data
a=randi([0,100],1,N);
ave_true=1/N*sum(a);
%% Randomized gossip
% find optimal P matrix
one=ones(N,1);
I=eye(N);
nod=1:N;
cvx_begin
    variable P(N,N)
    variable s
    expression Wb
    minimize(s)    
    subject to  
    % Nonnegative P
    for i=1:N
        for j=1:N
            P(i,j)>=0;
        end
    end    
    % P(i,j)=0 (i,j) not connected
    for i=1:N
        i_neighbor = neighbors(G,i)';
        % nodes that are not neighbors of node i
        diff = setdiff(nod,i_neighbor);
        P(i,diff) == 0;
    end
    %Sum of probability 
    for i=1:N
        sum(P(i,:))==1;
    end
    %Wb 
    for i=1:N
        for j=1:N
            if i~=j
                Wb(i,j)=(P(i,j)+P(j,i))/(2*N);    
            else
                Wb(i,j)=1-(sum(P(i,:))+sum(P(:,i)))/(2*N);
            end
        end
    end
    % semidefinite
    s*I-Wb+(one*one')/N == semidefinite(N) ;
cvx_end

P=full(P);
Wb=full(Wb);
% iterations
x=a';
k=500;
e0=zeros(1,20000);
i=randi([1,N],1,k);
for v=1:k
   p=find(P(i(v),:)~=0);
   prob=P(i(v),p);
   % choose a node with probability with Pji
   j = randsample(p, 1, true, prob);
   % generate Wk matrix
   W=I-(1/2)*(I(:,i(v))-I(:,j))*(I(:,i(v))-I(:,j))';
   x=W*x;
   e0(v)=norm(x-ave_true*ones(N,1),2);
end

%% Asynchronous ADMM
x_asy = a';
z = ones(N,N);
miu =ones(N,N);
c = 1.1;
e2 = zeros(1,20000);
i = randi([1,length(E(:,1))],1,k);

for v=1:k
    p=E(i(v),1);
    q=E(i(v),2);
   % Neighbors of node i
   J1 = neighbors(G,p);
   % Neighbors of node j
   J2 = neighbors(G,q);
   % x update
        x_asy(p) = (a(p)+(c*sum(z(p,J1))-sum(miu(p,J1))))/(1+c*length(J1));
        x_asy(q) = (a(q)+(c*sum(z(q,J2))-sum(miu(q,J2))))/(1+c*length(J2));
   % z update
        z(p,q) = 1/2*(1/c*(miu(p,q)+miu(q,p))+x_asy(p)+x_asy(q));
        z(q,p) = z(p,q);
   % miu update
        miu(p,q) = miu(p,q)+c*(x_asy(p)-z(p,q));
        miu(q,p) = miu(q,p)+c*(x_asy(q)-z(q,p));
   % error
    e2(v)=norm(x_asy-ave_true*ones(N,1),2);
end
%% Remove Nodes 5 11 15 22 33 44 57 60
G1=rmnode(G,[5 11 15 22 33 44 57 60]);
plot(G1);
x([5 11 15 22 33 44 57 60],:)=[];
x_asy([5 11 15 22 33 44 57 60],:)=[];
z([5 11 15 22 33 44 57 60],:)=[];
z(:,[5 11 15 22 33 44 57 60])=[];
miu([5 11 15 22 33 44 57 60],:)=[];
miu(:,[5 11 15 22 33 44 57 60])=[];
A1=adjacency(G1);
A1=full(A1);
G1 = graph(A1);
h = plot(G1);
% h.XData = floor((0:N-2)/8);
% h.YData = rem((0:N-2), 8);
% axis equal;
% title('sensor network,n=56')
% h1 = plot(G1);
% axis equal;
E1 = table2array(G1.Edges);
E1 = E1(:,1:2);
num_edge = length(E1);
N1 = N-8;
a(:,[5 11 15 22 33 44 57 60])=[];
ave_true = 1/N1*sum(a);
%% Random Gossip 
% find optimal P matrix
one=ones(N1,1);
I=eye(N1);
nod=1:N1;
cvx_begin
    variable P(N1,N1)
    variable s
    expression Wb
    minimize(s)    
    subject to  
    % Nonnegative P
    for i=1:N1
        for j=1:N1
            P(i,j)>=0;
        end
    end    
    % P(i,j)=0 (i,j) not connected
    for i=1:N1
        i_neighbor = neighbors(G,i)';
        % nodes that are not neighbors of node i
        diff = setdiff(nod,i_neighbor);
        P(i,diff) == 0;
    end
    %Sum of probability 
    for i=1:N1
        sum(P(i,:))==1;
    end
    %Wb 
    for i=1:N1
        for j=1:N1
            if i~=j
                Wb(i,j)=(P(i,j)+P(j,i))/(2*N1);    
            else
                Wb(i,j)=1-(sum(P(i,:))+sum(P(:,i)))/(2*N1);
            end
        end
    end
    % semidefinite
    s*I-Wb+(one*one')/N1 == semidefinite(N1) ;
cvx_end

P=full(P);
Wb=full(Wb);
% iterations
k=99500;
i=randi([1,N1],1,k);
x=a';
for v=501:20000
   p=find(P(i(v),:)~=0);
   prob=P(i(v),p);
   % choose a node with probability with Pji
   j = randsample(p, 1, true, prob);
   % generate Wk matrix
   W=I-(1/2)*(I(:,i(v))-I(:,j))*(I(:,i(v))-I(:,j))';
   x=W*x;
   e0(v)=norm(x-ave_true*ones(N1,1),2);
end
%% Asynchronous ADMM
% z = ones(N,N)*1;
c = 1.1;
e22 = zeros(1,k);
i = randi([1,length(E1(:,1))],1,20000);

for v=501:20000
    p=E1(i(v),1);
    q=E1(i(v),2);
   % Neighbors of node i
   J1 = neighbors(G1,p);
   % Neighbors of node j
   J2 = neighbors(G1,q);
   % x update
        x_asy(p) = (a(p)+(c*sum(z(p,J1))-sum(miu(p,J1))))/(1+c*length(J1));
        x_asy(q) = (a(q)+(c*sum(z(q,J2))-sum(miu(q,J2))))/(1+c*length(J2));
   % z update
        z(p,q) = 1/2*(1/c*(miu(p,q)+miu(q,p))+x_asy(p)+x_asy(q));
        z(q,p) = z(p,q);
   % miu update
        miu(p,q) = miu(p,q)+c*(x_asy(p)-z(p,q));
        miu(q,p) = miu(q,p)+c*(x_asy(q)-z(q,p));
   % error
    e2(v)=norm(x_asy-ave_true*ones(N1,1),2);
end
plot(e0);
hold on
plot(e2);
% hold on
% plot(e00);
% hold on
% plot(e22);
legend('random gossip','asynchronous ADMM')
xlabel('transmissions ') 
ylabel('||e||') 
set(gca,'yscale','log');
